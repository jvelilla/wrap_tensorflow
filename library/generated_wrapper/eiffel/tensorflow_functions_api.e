note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class TENSORFLOW_FUNCTIONS_API


feature -- Access

	tf_version: POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_Version ();
			]"
		end

	tf_data_type_size (dt: INTEGER): INTEGER
		do
			Result := c_tf_data_type_size (dt)
		end

	tf_new_status: detachable TF_STATUS_STRUCT_API
		do
			if attached c_tf_new_status as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_status (anonymous_1: TF_STATUS_STRUCT_API)
		do
			c_tf_delete_status (anonymous_1.item)
		end

	tf_set_status (s: TF_STATUS_STRUCT_API; code: INTEGER; msg: STRING)
		local
			msg_c_string: C_STRING
		do
			create msg_c_string.make (msg)
			c_tf_set_status (s.item, code, msg_c_string.item)
		end

	tf_get_code (s: TF_STATUS_STRUCT_API): INTEGER
		do
			Result := c_tf_get_code (s.item)
		end

	tf_message (s: TF_STATUS_STRUCT_API): POINTER
		do
			Result := c_tf_message (s.item)
		end

	tf_new_buffer_from_string (proto: POINTER; proto_len: INTEGER): detachable TF_BUFFER_STRUCT_API
		do
			if attached c_tf_new_buffer_from_string (proto, proto_len) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_new_buffer: detachable TF_BUFFER_STRUCT_API
		do
			if attached c_tf_new_buffer as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_buffer (anonymous_1: TF_BUFFER_STRUCT_API)
		do
			c_tf_delete_buffer (anonymous_1.item)
		end

	tf_get_buffer (buffer: TF_BUFFER_STRUCT_API): detachable TF_BUFFER_STRUCT_API
		do
			if attached c_tf_get_buffer (buffer.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_new_tensor (anonymous_1: INTEGER; dims: POINTER; num_dims: INTEGER; data: POINTER; len: INTEGER; deallocator: POINTER; deallocator_arg: POINTER): detachable TF_TENSOR_STRUCT_API
		do
			if attached c_tf_new_tensor (anonymous_1, dims, num_dims, data, len, deallocator, deallocator_arg) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_allocate_tensor (anonymous_1: INTEGER; dims: POINTER; num_dims: INTEGER; len: INTEGER): detachable TF_TENSOR_STRUCT_API
		do
			if attached c_tf_allocate_tensor (anonymous_1, dims, num_dims, len) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_tensor_maybe_move (tensor: TF_TENSOR_STRUCT_API): detachable TF_TENSOR_STRUCT_API
		do
			if attached c_tf_tensor_maybe_move (tensor.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_tensor (anonymous_1: TF_TENSOR_STRUCT_API)
		do
			c_tf_delete_tensor (anonymous_1.item)
		end

	tf_tensor_type (anonymous_1: TF_TENSOR_STRUCT_API): INTEGER
		do
			Result := c_tf_tensor_type (anonymous_1.item)
		end

	tf_num_dims (anonymous_1: TF_TENSOR_STRUCT_API): INTEGER
		do
			Result := c_tf_num_dims (anonymous_1.item)
		end

	tf_dim (tensor: TF_TENSOR_STRUCT_API; dim_index: INTEGER): INTEGER
		do
			Result := c_tf_dim (tensor.item, dim_index)
		end

	tf_tensor_byte_size (anonymous_1: TF_TENSOR_STRUCT_API): INTEGER
		do
			Result := c_tf_tensor_byte_size (anonymous_1.item)
		end

	tf_tensor_data (anonymous_1: TF_TENSOR_STRUCT_API): POINTER
		do
			Result := c_tf_tensor_data (anonymous_1.item)
		end

	tf_tensor_element_count (tensor: TF_TENSOR_STRUCT_API): INTEGER
		do
			Result := c_tf_tensor_element_count (tensor.item)
		end

	tf_tensor_bitcast_from (a_from: TF_TENSOR_STRUCT_API; type: INTEGER; to: TF_TENSOR_STRUCT_API; new_dims: POINTER; num_new_dims: INTEGER; status: TF_STATUS_STRUCT_API)
		do
			c_tf_tensor_bitcast_from (a_from.item, type, to.item, new_dims, num_new_dims, status.item)
		end

	tf_string_encode (src: STRING; src_len: INTEGER; dst: STRING; dst_len: INTEGER; status: TF_STATUS_STRUCT_API): INTEGER
		local
			src_c_string: C_STRING
			dst_c_string: C_STRING
		do
			create src_c_string.make (src)
			create dst_c_string.make (dst)
			Result := c_tf_string_encode (src_c_string.item, src_len, dst_c_string.item, dst_len, status.item)
		end

	tf_string_decode (src: STRING; src_len: INTEGER; dst: POINTER; dst_len: POINTER; status: TF_STATUS_STRUCT_API): INTEGER
		local
			src_c_string: C_STRING
		do
			create src_c_string.make (src)
			Result := c_tf_string_decode (src_c_string.item, src_len, dst, dst_len, status.item)
		end

	tf_string_encoded_size (len: INTEGER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_StringEncodedSize ((size_t)$len);
			]"
		end

	tf_new_session_options: detachable TF_SESSION_OPTIONS_STRUCT_API
		do
			if attached c_tf_new_session_options as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_set_target (options: TF_SESSION_OPTIONS_STRUCT_API; target: STRING)
		local
			target_c_string: C_STRING
		do
			create target_c_string.make (target)
			c_tf_set_target (options.item, target_c_string.item)
		end

	tf_set_config (options: TF_SESSION_OPTIONS_STRUCT_API; proto: POINTER; proto_len: INTEGER; status: TF_STATUS_STRUCT_API)
		do
			c_tf_set_config (options.item, proto, proto_len, status.item)
		end

	tf_delete_session_options (anonymous_1: TF_SESSION_OPTIONS_STRUCT_API)
		do
			c_tf_delete_session_options (anonymous_1.item)
		end

	tf_new_graph: detachable TF_GRAPH_STRUCT_API
		do
			if attached c_tf_new_graph as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_graph (anonymous_1: TF_GRAPH_STRUCT_API)
		do
			c_tf_delete_graph (anonymous_1.item)
		end

	tf_graph_set_tensor_shape (graph: TF_GRAPH_STRUCT_API; output: TF_OUTPUT_STRUCT_API; dims: POINTER; num_dims: INTEGER; status: TF_STATUS_STRUCT_API)
		do
			c_tf_graph_set_tensor_shape (graph.item, output.item, dims, num_dims, status.item)
		end

	tf_graph_get_tensor_num_dims (graph: TF_GRAPH_STRUCT_API; output: TF_OUTPUT_STRUCT_API; status: TF_STATUS_STRUCT_API): INTEGER
		do
			Result := c_tf_graph_get_tensor_num_dims (graph.item, output.item, status.item)
		end

	tf_graph_get_tensor_shape (graph: TF_GRAPH_STRUCT_API; output: TF_OUTPUT_STRUCT_API; dims: POINTER; num_dims: INTEGER; status: TF_STATUS_STRUCT_API)
		do
			c_tf_graph_get_tensor_shape (graph.item, output.item, dims, num_dims, status.item)
		end

	tf_new_operation (graph: TF_GRAPH_STRUCT_API; op_type: STRING; oper_name: STRING): detachable TF_OPERATION_DESCRIPTION_STRUCT_API
		local
			op_type_c_string: C_STRING
			oper_name_c_string: C_STRING
		do
			create op_type_c_string.make (op_type)
			create oper_name_c_string.make (oper_name)
			if attached c_tf_new_operation (graph.item, op_type_c_string.item, oper_name_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_set_device (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; device: STRING)
		local
			device_c_string: C_STRING
		do
			create device_c_string.make (device)
			c_tf_set_device (desc.item, device_c_string.item)
		end

	tf_add_input (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; input: TF_OUTPUT_STRUCT_API)
		do
			c_tf_add_input (desc.item, input.item)
		end

	tf_add_input_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; inputs: TF_OUTPUT_STRUCT_API; num_inputs: INTEGER)
		do
			c_tf_add_input_list (desc.item, inputs.item, num_inputs)
		end

	tf_add_control_input (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; input: TF_OPERATION_STRUCT_API)
		do
			c_tf_add_control_input (desc.item, input.item)
		end

	tf_colocate_with (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; op: TF_OPERATION_STRUCT_API)
		do
			c_tf_colocate_with (desc.item, op.item)
		end

	tf_set_attr_string (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; value: POINTER; length: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_string (desc.item, attr_name_c_string.item, value, length)
		end

	tf_set_attr_string_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; values: POINTER; lengths: POINTER; num_values: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_string_list (desc.item, attr_name_c_string.item, values, lengths, num_values)
		end

	tf_set_attr_int (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; value: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_int (desc.item, attr_name_c_string.item, value)
		end

	tf_set_attr_int_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; values: POINTER; num_values: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_int_list (desc.item, attr_name_c_string.item, values, num_values)
		end

	tf_set_attr_float (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; value: REAL)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_float (desc.item, attr_name_c_string.item, value)
		end

	tf_set_attr_float_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; values: POINTER; num_values: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_float_list (desc.item, attr_name_c_string.item, values, num_values)
		end

	tf_set_attr_bool (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; value: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_bool (desc.item, attr_name_c_string.item, value)
		end

	tf_set_attr_bool_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; values: STRING; num_values: INTEGER)
		local
			attr_name_c_string: C_STRING
			values_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			create values_c_string.make (values)
			c_tf_set_attr_bool_list (desc.item, attr_name_c_string.item, values_c_string.item, num_values)
		end

	tf_set_attr_type (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; value: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_type (desc.item, attr_name_c_string.item, value)
		end

	tf_set_attr_type_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; values: POINTER; num_values: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_type_list (desc.item, attr_name_c_string.item, values, num_values)
		end

	tf_set_attr_placeholder (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; placeholder: STRING)
		local
			attr_name_c_string: C_STRING
			placeholder_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			create placeholder_c_string.make (placeholder)
			c_tf_set_attr_placeholder (desc.item, attr_name_c_string.item, placeholder_c_string.item)
		end

	tf_set_attr_func_name (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; value: STRING; length: INTEGER)
		local
			attr_name_c_string: C_STRING
			value_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			create value_c_string.make (value)
			c_tf_set_attr_func_name (desc.item, attr_name_c_string.item, value_c_string.item, length)
		end

	tf_set_attr_shape (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; dims: POINTER; num_dims: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_shape (desc.item, attr_name_c_string.item, dims, num_dims)
		end

	tf_set_attr_shape_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; dims: POINTER; num_dims: POINTER; num_shapes: INTEGER)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_shape_list (desc.item, attr_name_c_string.item, dims, num_dims, num_shapes)
		end

	tf_set_attr_tensor_shape_proto (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; proto: POINTER; proto_len: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_tensor_shape_proto (desc.item, attr_name_c_string.item, proto, proto_len, status.item)
		end

	tf_set_attr_tensor_shape_proto_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; protos: POINTER; proto_lens: POINTER; num_shapes: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_tensor_shape_proto_list (desc.item, attr_name_c_string.item, protos, proto_lens, num_shapes, status.item)
		end

	tf_set_attr_tensor (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; value: TF_TENSOR_STRUCT_API; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_tensor (desc.item, attr_name_c_string.item, value.item, status.item)
		end

	tf_set_attr_tensor_list (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; values: TF_TENSOR_STRUCT_API; num_values: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_tensor_list (desc.item, attr_name_c_string.item, values.item, num_values, status.item)
		end

	tf_set_attr_value_proto (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; attr_name: STRING; proto: POINTER; proto_len: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_set_attr_value_proto (desc.item, attr_name_c_string.item, proto, proto_len, status.item)
		end

	tf_finish_operation (desc: TF_OPERATION_DESCRIPTION_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_OPERATION_STRUCT_API
		do
			if attached c_tf_finish_operation (desc.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_operation_name (oper: TF_OPERATION_STRUCT_API): POINTER
		do
			Result := c_tf_operation_name (oper.item)
		end

	tf_operation_op_type (oper: TF_OPERATION_STRUCT_API): POINTER
		do
			Result := c_tf_operation_op_type (oper.item)
		end

	tf_operation_device (oper: TF_OPERATION_STRUCT_API): POINTER
		do
			Result := c_tf_operation_device (oper.item)
		end

	tf_operation_num_outputs (oper: TF_OPERATION_STRUCT_API): INTEGER
		do
			Result := c_tf_operation_num_outputs (oper.item)
		end

	tf_operation_output_type (oper_out: TF_OUTPUT_STRUCT_API): INTEGER
		do
			Result := c_tf_operation_output_type (oper_out.item)
		end

	tf_operation_output_list_length (oper: TF_OPERATION_STRUCT_API; arg_name: STRING; status: TF_STATUS_STRUCT_API): INTEGER
		local
			arg_name_c_string: C_STRING
		do
			create arg_name_c_string.make (arg_name)
			Result := c_tf_operation_output_list_length (oper.item, arg_name_c_string.item, status.item)
		end

	tf_operation_num_inputs (oper: TF_OPERATION_STRUCT_API): INTEGER
		do
			Result := c_tf_operation_num_inputs (oper.item)
		end

	tf_operation_input_type (oper_in: TF_INPUT_STRUCT_API): INTEGER
		do
			Result := c_tf_operation_input_type (oper_in.item)
		end

	tf_operation_input_list_length (oper: TF_OPERATION_STRUCT_API; arg_name: STRING; status: TF_STATUS_STRUCT_API): INTEGER
		local
			arg_name_c_string: C_STRING
		do
			create arg_name_c_string.make (arg_name)
			Result := c_tf_operation_input_list_length (oper.item, arg_name_c_string.item, status.item)
		end

	tf_operation_input (oper_in: TF_INPUT_STRUCT_API): detachable TF_OUTPUT_STRUCT_API
		do
			if attached c_tf_operation_input (oper_in.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_operation_output_num_consumers (oper_out: TF_OUTPUT_STRUCT_API): INTEGER
		do
			Result := c_tf_operation_output_num_consumers (oper_out.item)
		end

	tf_operation_output_consumers (oper_out: TF_OUTPUT_STRUCT_API; consumers: TF_INPUT_STRUCT_API; max_consumers: INTEGER): INTEGER
		do
			Result := c_tf_operation_output_consumers (oper_out.item, consumers.item, max_consumers)
		end

	tf_operation_num_control_inputs (oper: TF_OPERATION_STRUCT_API): INTEGER
		do
			Result := c_tf_operation_num_control_inputs (oper.item)
		end

	tf_operation_get_control_inputs (oper: TF_OPERATION_STRUCT_API; control_inputs: TF_OPERATION_STRUCT_API; max_control_inputs: INTEGER): INTEGER
		do
			Result := c_tf_operation_get_control_inputs (oper.item, control_inputs.item, max_control_inputs)
		end

	tf_operation_num_control_outputs (oper: TF_OPERATION_STRUCT_API): INTEGER
		do
			Result := c_tf_operation_num_control_outputs (oper.item)
		end

	tf_operation_get_control_outputs (oper: TF_OPERATION_STRUCT_API; control_outputs: TF_OPERATION_STRUCT_API; max_control_outputs: INTEGER): INTEGER
		do
			Result := c_tf_operation_get_control_outputs (oper.item, control_outputs.item, max_control_outputs)
		end

	tf_operation_get_attr_metadata (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; status: TF_STATUS_STRUCT_API): detachable TF_ATTR_METADATA_STRUCT_API
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			if attached c_tf_operation_get_attr_metadata (oper.item, attr_name_c_string.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_operation_get_attr_string (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: POINTER; max_length: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_string (oper.item, attr_name_c_string.item, value, max_length, status.item)
		end

	tf_operation_get_attr_string_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; values: POINTER; lengths: POINTER; max_values: INTEGER; storage: POINTER; storage_size: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_string_list (oper.item, attr_name_c_string.item, values, lengths, max_values, storage, storage_size, status.item)
		end

	tf_operation_get_attr_int (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: POINTER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_int (oper.item, attr_name_c_string.item, value, status.item)
		end

	tf_operation_get_attr_int_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; values: POINTER; max_values: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_int_list (oper.item, attr_name_c_string.item, values, max_values, status.item)
		end

	tf_operation_get_attr_float (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: POINTER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_float (oper.item, attr_name_c_string.item, value, status.item)
		end

	tf_operation_get_attr_float_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; values: POINTER; max_values: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_float_list (oper.item, attr_name_c_string.item, values, max_values, status.item)
		end

	tf_operation_get_attr_bool (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: STRING; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
			value_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			create value_c_string.make (value)
			c_tf_operation_get_attr_bool (oper.item, attr_name_c_string.item, value_c_string.item, status.item)
		end

	tf_operation_get_attr_bool_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; values: STRING; max_values: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
			values_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			create values_c_string.make (values)
			c_tf_operation_get_attr_bool_list (oper.item, attr_name_c_string.item, values_c_string.item, max_values, status.item)
		end

	tf_operation_get_attr_type (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: POINTER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_type (oper.item, attr_name_c_string.item, value, status.item)
		end

	tf_operation_get_attr_type_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; values: POINTER; max_values: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_type_list (oper.item, attr_name_c_string.item, values, max_values, status.item)
		end

	tf_operation_get_attr_shape (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: POINTER; num_dims: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_shape (oper.item, attr_name_c_string.item, value, num_dims, status.item)
		end

	tf_operation_get_attr_shape_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; dims: POINTER; num_dims: POINTER; num_shapes: INTEGER; storage: POINTER; storage_size: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_shape_list (oper.item, attr_name_c_string.item, dims, num_dims, num_shapes, storage, storage_size, status.item)
		end

	tf_operation_get_attr_tensor_shape_proto (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_tensor_shape_proto (oper.item, attr_name_c_string.item, value.item, status.item)
		end

	tf_operation_get_attr_tensor_shape_proto_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; values: TF_BUFFER_STRUCT_API; max_values: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_tensor_shape_proto_list (oper.item, attr_name_c_string.item, values.item, max_values, status.item)
		end

	tf_operation_get_attr_tensor (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; value: TF_TENSOR_STRUCT_API; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_tensor (oper.item, attr_name_c_string.item, value.item, status.item)
		end

	tf_operation_get_attr_tensor_list (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; values: TF_TENSOR_STRUCT_API; max_values: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_tensor_list (oper.item, attr_name_c_string.item, values.item, max_values, status.item)
		end

	tf_operation_get_attr_value_proto (oper: TF_OPERATION_STRUCT_API; attr_name: STRING; output_attr_value: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_operation_get_attr_value_proto (oper.item, attr_name_c_string.item, output_attr_value.item, status.item)
		end

	tf_graph_operation_by_name (graph: TF_GRAPH_STRUCT_API; oper_name: STRING): detachable TF_OPERATION_STRUCT_API
		local
			oper_name_c_string: C_STRING
		do
			create oper_name_c_string.make (oper_name)
			if attached c_tf_graph_operation_by_name (graph.item, oper_name_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_graph_next_operation (graph: TF_GRAPH_STRUCT_API; pos: POINTER): detachable TF_OPERATION_STRUCT_API
		do
			if attached c_tf_graph_next_operation (graph.item, pos) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_graph_to_graph_def (graph: TF_GRAPH_STRUCT_API; output_graph_def: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_graph_to_graph_def (graph.item, output_graph_def.item, status.item)
		end

	tf_graph_get_op_def (graph: TF_GRAPH_STRUCT_API; op_name: STRING; output_op_def: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		local
			op_name_c_string: C_STRING
		do
			create op_name_c_string.make (op_name)
			c_tf_graph_get_op_def (graph.item, op_name_c_string.item, output_op_def.item, status.item)
		end

	tf_graph_versions (graph: TF_GRAPH_STRUCT_API; output_version_def: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_graph_versions (graph.item, output_version_def.item, status.item)
		end

	tf_new_import_graph_def_options: detachable TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API
		do
			if attached c_tf_new_import_graph_def_options as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_import_graph_def_options (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API)
		do
			c_tf_delete_import_graph_def_options (opts.item)
		end

	tf_import_graph_def_options_set_prefix (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; a_prefix: STRING)
		local
			a_prefix_c_string: C_STRING
		do
			create a_prefix_c_string.make (a_prefix)
			c_tf_import_graph_def_options_set_prefix (opts.item, a_prefix_c_string.item)
		end

	tf_import_graph_def_options_set_default_device (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; device: STRING)
		local
			device_c_string: C_STRING
		do
			create device_c_string.make (device)
			c_tf_import_graph_def_options_set_default_device (opts.item, device_c_string.item)
		end

	tf_import_graph_def_options_set_uniquify_names (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; uniquify_names: INTEGER)
		do
			c_tf_import_graph_def_options_set_uniquify_names (opts.item, uniquify_names)
		end

	tf_import_graph_def_options_set_uniquify_prefix (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; uniquify_prefix: INTEGER)
		do
			c_tf_import_graph_def_options_set_uniquify_prefix (opts.item, uniquify_prefix)
		end

	tf_import_graph_def_options_add_input_mapping (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; src_name: STRING; src_index: INTEGER; dst: TF_OUTPUT_STRUCT_API)
		local
			src_name_c_string: C_STRING
		do
			create src_name_c_string.make (src_name)
			c_tf_import_graph_def_options_add_input_mapping (opts.item, src_name_c_string.item, src_index, dst.item)
		end

	tf_import_graph_def_options_remap_control_dependency (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; src_name: STRING; dst: TF_OPERATION_STRUCT_API)
		local
			src_name_c_string: C_STRING
		do
			create src_name_c_string.make (src_name)
			c_tf_import_graph_def_options_remap_control_dependency (opts.item, src_name_c_string.item, dst.item)
		end

	tf_import_graph_def_options_add_control_dependency (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; oper: TF_OPERATION_STRUCT_API)
		do
			c_tf_import_graph_def_options_add_control_dependency (opts.item, oper.item)
		end

	tf_import_graph_def_options_add_return_output (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; oper_name: STRING; index: INTEGER)
		local
			oper_name_c_string: C_STRING
		do
			create oper_name_c_string.make (oper_name)
			c_tf_import_graph_def_options_add_return_output (opts.item, oper_name_c_string.item, index)
		end

	tf_import_graph_def_options_num_return_outputs (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API): INTEGER
		do
			Result := c_tf_import_graph_def_options_num_return_outputs (opts.item)
		end

	tf_import_graph_def_options_add_return_operation (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; oper_name: STRING)
		local
			oper_name_c_string: C_STRING
		do
			create oper_name_c_string.make (oper_name)
			c_tf_import_graph_def_options_add_return_operation (opts.item, oper_name_c_string.item)
		end

	tf_import_graph_def_options_num_return_operations (opts: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API): INTEGER
		do
			Result := c_tf_import_graph_def_options_num_return_operations (opts.item)
		end

	tf_import_graph_def_results_return_outputs (results: TF_IMPORT_GRAPH_DEF_RESULTS_STRUCT_API; num_outputs: POINTER; outputs: TF_OUTPUT_STRUCT_API)
		do
			c_tf_import_graph_def_results_return_outputs (results.item, num_outputs, outputs.item)
		end

	tf_import_graph_def_results_return_operations (results: TF_IMPORT_GRAPH_DEF_RESULTS_STRUCT_API; num_opers: POINTER; opers: TF_OPERATION_STRUCT_API)
		do
			c_tf_import_graph_def_results_return_operations (results.item, num_opers, opers.item)
		end

	tf_import_graph_def_results_missing_unused_input_mappings (results: TF_IMPORT_GRAPH_DEF_RESULTS_STRUCT_API; num_missing_unused_input_mappings: POINTER; src_names: POINTER; src_indexes: POINTER)
		do
			c_tf_import_graph_def_results_missing_unused_input_mappings (results.item, num_missing_unused_input_mappings, src_names, src_indexes)
		end

	tf_delete_import_graph_def_results (results: TF_IMPORT_GRAPH_DEF_RESULTS_STRUCT_API)
		do
			c_tf_delete_import_graph_def_results (results.item)
		end

	tf_graph_import_graph_def_with_results (graph: TF_GRAPH_STRUCT_API; graph_def: TF_BUFFER_STRUCT_API; options: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_IMPORT_GRAPH_DEF_RESULTS_STRUCT_API
		do
			if attached c_tf_graph_import_graph_def_with_results (graph.item, graph_def.item, options.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_graph_import_graph_def_with_return_outputs (graph: TF_GRAPH_STRUCT_API; graph_def: TF_BUFFER_STRUCT_API; options: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; return_outputs: TF_OUTPUT_STRUCT_API; num_return_outputs: INTEGER; status: TF_STATUS_STRUCT_API)
		do
			c_tf_graph_import_graph_def_with_return_outputs (graph.item, graph_def.item, options.item, return_outputs.item, num_return_outputs, status.item)
		end

	tf_graph_import_graph_def (graph: TF_GRAPH_STRUCT_API; graph_def: TF_BUFFER_STRUCT_API; options: TF_IMPORT_GRAPH_DEF_OPTIONS_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_graph_import_graph_def (graph.item, graph_def.item, options.item, status.item)
		end

	tf_graph_copy_function (g: TF_GRAPH_STRUCT_API; func: TF_FUNCTION_STRUCT_API; grad: TF_FUNCTION_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_graph_copy_function (g.item, func.item, grad.item, status.item)
		end

	tf_graph_num_functions (g: TF_GRAPH_STRUCT_API): INTEGER
		do
			Result := c_tf_graph_num_functions (g.item)
		end

	tf_graph_get_functions (g: TF_GRAPH_STRUCT_API; funcs: TF_FUNCTION_STRUCT_API; max_func: INTEGER; status: TF_STATUS_STRUCT_API): INTEGER
		do
			Result := c_tf_graph_get_functions (g.item, funcs.item, max_func, status.item)
		end

	tf_operation_to_node_def (oper: TF_OPERATION_STRUCT_API; output_node_def: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_operation_to_node_def (oper.item, output_node_def.item, status.item)
		end


	tf_finish_while (params: TF_WHILE_PARAMS_STRUCT_API; status: TF_STATUS_STRUCT_API; outputs: TF_OUTPUT_STRUCT_API)
		do
			c_tf_finish_while (params.item, status.item, outputs.item)
		end

	tf_abort_while (params: TF_WHILE_PARAMS_STRUCT_API)
		do
			c_tf_abort_while (params.item)
		end

	tf_add_gradients (g: TF_GRAPH_STRUCT_API; y: TF_OUTPUT_STRUCT_API; ny: INTEGER; x: TF_OUTPUT_STRUCT_API; nx: INTEGER; dx: TF_OUTPUT_STRUCT_API; status: TF_STATUS_STRUCT_API; dy: TF_OUTPUT_STRUCT_API)
		do
			c_tf_add_gradients (g.item, y.item, ny, x.item, nx, dx.item, status.item, dy.item)
		end

	tf_add_gradients_with_prefix (g: TF_GRAPH_STRUCT_API; a_prefix: STRING; y: TF_OUTPUT_STRUCT_API; ny: INTEGER; x: TF_OUTPUT_STRUCT_API; nx: INTEGER; dx: TF_OUTPUT_STRUCT_API; status: TF_STATUS_STRUCT_API; dy: TF_OUTPUT_STRUCT_API)
		local
			a_prefix_c_string: C_STRING
		do
			create a_prefix_c_string.make (a_prefix)
			c_tf_add_gradients_with_prefix (g.item, a_prefix_c_string.item, y.item, ny, x.item, nx, dx.item, status.item, dy.item)
		end

	tf_graph_to_function (fn_body: TF_GRAPH_STRUCT_API; fn_name: STRING; append_hash_to_fn_name: INTEGER; num_opers: INTEGER; opers: TF_OPERATION_STRUCT_API; ninputs: INTEGER; inputs: TF_OUTPUT_STRUCT_API; noutputs: INTEGER; outputs: TF_OUTPUT_STRUCT_API; output_names: POINTER; opts: TF_FUNCTION_OPTIONS_STRUCT_API; description: STRING; status: TF_STATUS_STRUCT_API): detachable TF_FUNCTION_STRUCT_API
		local
			fn_name_c_string: C_STRING
			description_c_string: C_STRING
		do
			create fn_name_c_string.make (fn_name)
			create description_c_string.make (description)
			if attached c_tf_graph_to_function (fn_body.item, fn_name_c_string.item, append_hash_to_fn_name, num_opers, opers.item, ninputs, inputs.item, noutputs, outputs.item, output_names, opts.item, description_c_string.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_graph_to_function_with_control_outputs (fn_body: TF_GRAPH_STRUCT_API; fn_name: STRING; append_hash_to_fn_name: INTEGER; num_opers: INTEGER; opers: TF_OPERATION_STRUCT_API; ninputs: INTEGER; inputs: TF_OUTPUT_STRUCT_API; noutputs: INTEGER; outputs: TF_OUTPUT_STRUCT_API; output_names: POINTER; ncontrol_outputs: INTEGER; control_outputs: TF_OPERATION_STRUCT_API; control_output_names: POINTER; opts: TF_FUNCTION_OPTIONS_STRUCT_API; description: STRING; status: TF_STATUS_STRUCT_API): detachable TF_FUNCTION_STRUCT_API
		local
			fn_name_c_string: C_STRING
			description_c_string: C_STRING
		do
			create fn_name_c_string.make (fn_name)
			create description_c_string.make (description)
			if attached c_tf_graph_to_function_with_control_outputs (fn_body.item, fn_name_c_string.item, append_hash_to_fn_name, num_opers, opers.item, ninputs, inputs.item, noutputs, outputs.item, output_names, ncontrol_outputs, control_outputs.item, control_output_names, opts.item, description_c_string.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_function_name (func: TF_FUNCTION_STRUCT_API): POINTER
		do
			Result := c_tf_function_name (func.item)
		end

	tf_function_to_function_def (func: TF_FUNCTION_STRUCT_API; output_func_def: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_function_to_function_def (func.item, output_func_def.item, status.item)
		end

	tf_function_import_function_def (proto: POINTER; proto_len: INTEGER; status: TF_STATUS_STRUCT_API): detachable TF_FUNCTION_STRUCT_API
		do
			if attached c_tf_function_import_function_def (proto, proto_len, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_function_set_attr_value_proto (func: TF_FUNCTION_STRUCT_API; attr_name: STRING; proto: POINTER; proto_len: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_function_set_attr_value_proto (func.item, attr_name_c_string.item, proto, proto_len, status.item)
		end

	tf_function_get_attr_value_proto (func: TF_FUNCTION_STRUCT_API; attr_name: STRING; output_attr_value: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		local
			attr_name_c_string: C_STRING
		do
			create attr_name_c_string.make (attr_name)
			c_tf_function_get_attr_value_proto (func.item, attr_name_c_string.item, output_attr_value.item, status.item)
		end

	tf_delete_function (func: TF_FUNCTION_STRUCT_API)
		do
			c_tf_delete_function (func.item)
		end

	tf_try_evaluate_constant (graph: TF_GRAPH_STRUCT_API; output: TF_OUTPUT_STRUCT_API; a_result: TF_TENSOR_STRUCT_API; status: TF_STATUS_STRUCT_API): INTEGER
		do
			Result := c_tf_try_evaluate_constant (graph.item, output.item, a_result.item, status.item)
		end

	tf_new_session (graph: TF_GRAPH_STRUCT_API; opts: TF_SESSION_OPTIONS_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_SESSION_STRUCT_API
		do
			if attached c_tf_new_session (graph.item, opts.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_load_session_from_saved_model (session_options: TF_SESSION_OPTIONS_STRUCT_API; run_options: TF_BUFFER_STRUCT_API; export_dir: STRING; tags: POINTER; tags_len: INTEGER; graph: TF_GRAPH_STRUCT_API; meta_graph_def: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_SESSION_STRUCT_API
		local
			export_dir_c_string: C_STRING
		do
			create export_dir_c_string.make (export_dir)
			if attached c_tf_load_session_from_saved_model (session_options.item, run_options.item, export_dir_c_string.item, tags, tags_len, graph.item, meta_graph_def.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_close_session (anonymous_1: TF_SESSION_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_close_session (anonymous_1.item, status.item)
		end

	tf_delete_session (anonymous_1: TF_SESSION_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_delete_session (anonymous_1.item, status.item)
		end

	tf_session_run (session: TF_SESSION_STRUCT_API; run_options: TF_BUFFER_STRUCT_API; inputs: TF_OUTPUT_STRUCT_API; input_values: TF_TENSOR_STRUCT_API; ninputs: INTEGER; outputs: TF_OUTPUT_STRUCT_API; output_values: TF_TENSOR_STRUCT_API; noutputs: INTEGER; target_opers: TF_OPERATION_STRUCT_API; ntargets: INTEGER; run_metadata: TF_BUFFER_STRUCT_API; anonymous_12: TF_STATUS_STRUCT_API)
		do
			c_tf_session_run (session.item, run_options.item, inputs.item, input_values.item, ninputs, outputs.item, output_values.item, noutputs, target_opers.item, ntargets, run_metadata.item, anonymous_12.item)
		end

	tf_session_prun_setup (anonymous_1: TF_SESSION_STRUCT_API; inputs: TF_OUTPUT_STRUCT_API; ninputs: INTEGER; outputs: TF_OUTPUT_STRUCT_API; noutputs: INTEGER; target_opers: TF_OPERATION_STRUCT_API; ntargets: INTEGER; handle: POINTER; anonymous_9: TF_STATUS_STRUCT_API)
		do
			c_tf_session_prun_setup (anonymous_1.item, inputs.item, ninputs, outputs.item, noutputs, target_opers.item, ntargets, handle, anonymous_9.item)
		end

	tf_session_prun (anonymous_1: TF_SESSION_STRUCT_API; handle: STRING; inputs: TF_OUTPUT_STRUCT_API; input_values: TF_TENSOR_STRUCT_API; ninputs: INTEGER; outputs: TF_OUTPUT_STRUCT_API; output_values: TF_TENSOR_STRUCT_API; noutputs: INTEGER; target_opers: TF_OPERATION_STRUCT_API; ntargets: INTEGER; anonymous_11: TF_STATUS_STRUCT_API)
		local
			handle_c_string: C_STRING
		do
			create handle_c_string.make (handle)
			c_tf_session_prun (anonymous_1.item, handle_c_string.item, inputs.item, input_values.item, ninputs, outputs.item, output_values.item, noutputs, target_opers.item, ntargets, anonymous_11.item)
		end

	tf_delete_prun_handle (handle: STRING)
		local
			handle_c_string: C_STRING
		do
			create handle_c_string.make (handle)
			c_tf_delete_prun_handle (handle_c_string.item)
		end

	tf_new_deprecated_session (anonymous_1: TF_SESSION_OPTIONS_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_DEPRECATED_SESSION_STRUCT_API
		do
			if attached c_tf_new_deprecated_session (anonymous_1.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_close_deprecated_session (anonymous_1: TF_DEPRECATED_SESSION_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_close_deprecated_session (anonymous_1.item, status.item)
		end

	tf_delete_deprecated_session (anonymous_1: TF_DEPRECATED_SESSION_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_delete_deprecated_session (anonymous_1.item, status.item)
		end

	tf_reset (opt: TF_SESSION_OPTIONS_STRUCT_API; containers: POINTER; ncontainers: INTEGER; status: TF_STATUS_STRUCT_API)
		do
			c_tf_reset (opt.item, containers, ncontainers, status.item)
		end

	tf_extend_graph (anonymous_1: TF_DEPRECATED_SESSION_STRUCT_API; proto: POINTER; proto_len: INTEGER; anonymous_4: TF_STATUS_STRUCT_API)
		do
			c_tf_extend_graph (anonymous_1.item, proto, proto_len, anonymous_4.item)
		end

	tf_run (anonymous_1: TF_DEPRECATED_SESSION_STRUCT_API; run_options: TF_BUFFER_STRUCT_API; input_names: POINTER; inputs: TF_TENSOR_STRUCT_API; ninputs: INTEGER; output_names: POINTER; outputs: TF_TENSOR_STRUCT_API; noutputs: INTEGER; target_oper_names: POINTER; ntargets: INTEGER; run_metadata: TF_BUFFER_STRUCT_API; anonymous_12: TF_STATUS_STRUCT_API)
		do
			c_tf_run (anonymous_1.item, run_options.item, input_names, inputs.item, ninputs, output_names, outputs.item, noutputs, target_oper_names, ntargets, run_metadata.item, anonymous_12.item)
		end

	tf_prun_setup (anonymous_1: TF_DEPRECATED_SESSION_STRUCT_API; input_names: POINTER; ninputs: INTEGER; output_names: POINTER; noutputs: INTEGER; target_oper_names: POINTER; ntargets: INTEGER; handle: POINTER; anonymous_9: TF_STATUS_STRUCT_API)
		do
			c_tf_prun_setup (anonymous_1.item, input_names, ninputs, output_names, noutputs, target_oper_names, ntargets, handle, anonymous_9.item)
		end

	tf_prun (anonymous_1: TF_DEPRECATED_SESSION_STRUCT_API; handle: STRING; input_names: POINTER; inputs: TF_TENSOR_STRUCT_API; ninputs: INTEGER; output_names: POINTER; outputs: TF_TENSOR_STRUCT_API; noutputs: INTEGER; target_oper_names: POINTER; ntargets: INTEGER; anonymous_11: TF_STATUS_STRUCT_API)
		local
			handle_c_string: C_STRING
		do
			create handle_c_string.make (handle)
			c_tf_prun (anonymous_1.item, handle_c_string.item, input_names, inputs.item, ninputs, output_names, outputs.item, noutputs, target_oper_names, ntargets, anonymous_11.item)
		end

	tf_session_list_devices (session: TF_SESSION_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_DEVICE_LIST_STRUCT_API
		do
			if attached c_tf_session_list_devices (session.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_deprecated_session_list_devices (session: TF_DEPRECATED_SESSION_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_DEVICE_LIST_STRUCT_API
		do
			if attached c_tf_deprecated_session_list_devices (session.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_device_list (list: TF_DEVICE_LIST_STRUCT_API)
		do
			c_tf_delete_device_list (list.item)
		end

	tf_device_list_count (list: TF_DEVICE_LIST_STRUCT_API): INTEGER
		do
			Result := c_tf_device_list_count (list.item)
		end

	tf_device_list_name (list: TF_DEVICE_LIST_STRUCT_API; index: INTEGER; status: TF_STATUS_STRUCT_API): POINTER
		do
			Result := c_tf_device_list_name (list.item, index, status.item)
		end

	tf_device_list_type (list: TF_DEVICE_LIST_STRUCT_API; index: INTEGER; status: TF_STATUS_STRUCT_API): POINTER
		do
			Result := c_tf_device_list_type (list.item, index, status.item)
		end

	tf_device_list_memory_bytes (list: TF_DEVICE_LIST_STRUCT_API; index: INTEGER; status: TF_STATUS_STRUCT_API): INTEGER
		do
			Result := c_tf_device_list_memory_bytes (list.item, index, status.item)
		end

	tf_device_list_incarnation (list: TF_DEVICE_LIST_STRUCT_API; index: INTEGER; status: TF_STATUS_STRUCT_API): INTEGER
		do
			Result := c_tf_device_list_incarnation (list.item, index, status.item)
		end

	tf_load_library (library_filename: STRING; status: TF_STATUS_STRUCT_API): detachable TF_LIBRARY_STRUCT_API
		local
			library_filename_c_string: C_STRING
		do
			create library_filename_c_string.make (library_filename)
			if attached c_tf_load_library (library_filename_c_string.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_get_op_list (lib_handle: TF_LIBRARY_STRUCT_API): detachable TF_BUFFER_STRUCT_API
		do
			if attached c_tf_get_op_list (lib_handle.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_library_handle (lib_handle: TF_LIBRARY_STRUCT_API)
		do
			c_tf_delete_library_handle (lib_handle.item)
		end

	tf_get_all_op_list: detachable TF_BUFFER_STRUCT_API
		do
			if attached c_tf_get_all_op_list as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_new_api_def_map (op_list_buffer: TF_BUFFER_STRUCT_API; status: TF_STATUS_STRUCT_API): detachable TF_API_DEF_MAP_STRUCT_API
		do
			if attached c_tf_new_api_def_map (op_list_buffer.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_delete_api_def_map (apimap: TF_API_DEF_MAP_STRUCT_API)
		do
			c_tf_delete_api_def_map (apimap.item)
		end

	tf_api_def_map_put (api_def_map: TF_API_DEF_MAP_STRUCT_API; text: STRING; text_len: INTEGER; status: TF_STATUS_STRUCT_API)
		local
			text_c_string: C_STRING
		do
			create text_c_string.make (text)
			c_tf_api_def_map_put (api_def_map.item, text_c_string.item, text_len, status.item)
		end

	tf_api_def_map_get (api_def_map: TF_API_DEF_MAP_STRUCT_API; name: STRING; name_len: INTEGER; status: TF_STATUS_STRUCT_API): detachable TF_BUFFER_STRUCT_API
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			if attached c_tf_api_def_map_get (api_def_map.item, name_c_string.item, name_len, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_get_all_registered_kernels (status: TF_STATUS_STRUCT_API): detachable TF_BUFFER_STRUCT_API
		do
			if attached c_tf_get_all_registered_kernels (status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_get_registered_kernels_for_op (name: STRING; status: TF_STATUS_STRUCT_API): detachable TF_BUFFER_STRUCT_API
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			if attached c_tf_get_registered_kernels_for_op (name_c_string.item, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_new_server (proto: POINTER; proto_len: INTEGER; status: TF_STATUS_STRUCT_API): detachable TF_SERVER_STRUCT_API
		do
			if attached c_tf_new_server (proto, proto_len, status.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	tf_server_start (server: TF_SERVER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_server_start (server.item, status.item)
		end

	tf_server_stop (server: TF_SERVER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_server_stop (server.item, status.item)
		end

	tf_server_join (server: TF_SERVER_STRUCT_API; status: TF_STATUS_STRUCT_API)
		do
			c_tf_server_join (server.item, status.item)
		end

	tf_server_target (server: TF_SERVER_STRUCT_API): POINTER
		do
			Result := c_tf_server_target (server.item)
		end

	tf_delete_server (server: TF_SERVER_STRUCT_API)
		do
			c_tf_delete_server (server.item)
		end

	tf_register_log_listener (listener: POINTER)
		do
			c_tf_register_log_listener (listener)
		end

feature -- Externals

	c_tf_data_type_size (dt: INTEGER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_DataTypeSize ((TF_DataType)$dt);
			]"
		end

	c_tf_new_status: POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewStatus ();
			]"
		end

	c_tf_delete_status (anonymous_1: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteStatus ((TF_Status*)$anonymous_1);
			]"
		end

	c_tf_set_status (s: POINTER; code: INTEGER; msg: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetStatus ((TF_Status*)$s, (TF_Code)$code, (char const*)$msg);
			]"
		end

	c_tf_get_code (s: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GetCode ((TF_Status const*)$s);
			]"
		end

	c_tf_message (s: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_Message ((TF_Status const*)$s);
			]"
		end

	c_tf_new_buffer_from_string (proto: POINTER; proto_len: INTEGER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewBufferFromString ((void const*)$proto, (size_t)$proto_len);
			]"
		end

	c_tf_new_buffer: POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewBuffer ();
			]"
		end

	c_tf_delete_buffer (anonymous_1: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteBuffer ((TF_Buffer*)$anonymous_1);
			]"
		end

	c_tf_get_buffer (buffer: POINTER): POINTER
		external
			"C inline use <c_api.h>"

		alias
			"[
				TF_Buffer *result = (TF_Buffer*) malloc (sizeof(TF_Buffer));
				*result = TF_GetBuffer ((TF_Buffer*)$buffer);
				return result;
			]"
		end

	c_tf_new_tensor (anonymous_1: INTEGER; dims: POINTER; num_dims: INTEGER; data: POINTER; len: INTEGER; deallocator: POINTER; deallocator_arg: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewTensor ((TF_DataType)$anonymous_1, (int64_t const*)$dims, (int)$num_dims, (void*)$data, (size_t)$len, (void (*) (void *data, size_t len, void *arg))$deallocator, (void*)$deallocator_arg);
			]"
		end

	c_tf_allocate_tensor (anonymous_1: INTEGER; dims: POINTER; num_dims: INTEGER; len: INTEGER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_AllocateTensor ((TF_DataType)$anonymous_1, (int64_t const*)$dims, (int)$num_dims, (size_t)$len);
			]"
		end

	c_tf_tensor_maybe_move (tensor: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_TensorMaybeMove ((TF_Tensor*)$tensor);
			]"
		end

	c_tf_delete_tensor (anonymous_1: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteTensor ((TF_Tensor*)$anonymous_1);
			]"
		end

	c_tf_tensor_type (anonymous_1: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_TensorType ((TF_Tensor const*)$anonymous_1);
			]"
		end

	c_tf_num_dims (anonymous_1: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NumDims ((TF_Tensor const*)$anonymous_1);
			]"
		end

	c_tf_dim (tensor: POINTER; dim_index: INTEGER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_Dim ((TF_Tensor const*)$tensor, (int)$dim_index);
			]"
		end

	c_tf_tensor_byte_size (anonymous_1: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_TensorByteSize ((TF_Tensor const*)$anonymous_1);
			]"
		end

	c_tf_tensor_data (anonymous_1: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_TensorData ((TF_Tensor const*)$anonymous_1);
			]"
		end

	c_tf_tensor_element_count (tensor: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_TensorElementCount ((TF_Tensor const*)$tensor);
			]"
		end

	c_tf_tensor_bitcast_from (a_from: POINTER; type: INTEGER; to: POINTER; new_dims: POINTER; num_new_dims: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_TensorBitcastFrom ((TF_Tensor const*)$a_from, (TF_DataType)$type, (TF_Tensor*)$to, (int64_t const*)$new_dims, (int)$num_new_dims, (TF_Status*)$status);
			]"
		end

	c_tf_string_encode (src: POINTER; src_len: INTEGER; dst: POINTER; dst_len: INTEGER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_StringEncode ((char const*)$src, (size_t)$src_len, (char*)$dst, (size_t)$dst_len, (TF_Status*)$status);
			]"
		end

	c_tf_string_decode (src: POINTER; src_len: INTEGER; dst: POINTER; dst_len: POINTER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_StringDecode ((char const*)$src, (size_t)$src_len, (char const**)$dst, (size_t*)$dst_len, (TF_Status*)$status);
			]"
		end

	c_tf_new_session_options: POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewSessionOptions ();
			]"
		end

	c_tf_set_target (options: POINTER; target: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetTarget ((TF_SessionOptions*)$options, (char const*)$target);
			]"
		end

	c_tf_set_config (options: POINTER; proto: POINTER; proto_len: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetConfig ((TF_SessionOptions*)$options, (void const*)$proto, (size_t)$proto_len, (TF_Status*)$status);
			]"
		end

	c_tf_delete_session_options (anonymous_1: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteSessionOptions ((TF_SessionOptions*)$anonymous_1);
			]"
		end

	c_tf_new_graph: POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewGraph ();
			]"
		end

	c_tf_delete_graph (anonymous_1: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteGraph ((TF_Graph*)$anonymous_1);
			]"
		end

	c_tf_graph_set_tensor_shape (graph: POINTER; output: POINTER; dims: POINTER; num_dims: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphSetTensorShape ((TF_Graph*)$graph, *(TF_Output*)$output, (int64_t const*)$dims, (int const)$num_dims, (TF_Status*)$status);
			]"
		end

	c_tf_graph_get_tensor_num_dims (graph: POINTER; output: POINTER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphGetTensorNumDims ((TF_Graph*)$graph, *(TF_Output*)$output, (TF_Status*)$status);
			]"
		end

	c_tf_graph_get_tensor_shape (graph: POINTER; output: POINTER; dims: POINTER; num_dims: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphGetTensorShape ((TF_Graph*)$graph, *(TF_Output*)$output, (int64_t*)$dims, (int)$num_dims, (TF_Status*)$status);
			]"
		end

	c_tf_new_operation (graph: POINTER; op_type: POINTER; oper_name: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewOperation ((TF_Graph*)$graph, (char const*)$op_type, (char const*)$oper_name);
			]"
		end

	c_tf_set_device (desc: POINTER; device: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetDevice ((TF_OperationDescription*)$desc, (char const*)$device);
			]"
		end

	c_tf_add_input (desc: POINTER; input: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_AddInput ((TF_OperationDescription*)$desc, *(TF_Output*)$input);
			]"
		end

	c_tf_add_input_list (desc: POINTER; inputs: POINTER; num_inputs: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_AddInputList ((TF_OperationDescription*)$desc, (TF_Output const*)$inputs, (int)$num_inputs);
			]"
		end

	c_tf_add_control_input (desc: POINTER; input: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_AddControlInput ((TF_OperationDescription*)$desc, (TF_Operation*)$input);
			]"
		end

	c_tf_colocate_with (desc: POINTER; op: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ColocateWith ((TF_OperationDescription*)$desc, (TF_Operation*)$op);
			]"
		end

	c_tf_set_attr_string (desc: POINTER; attr_name: POINTER; value: POINTER; length: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrString ((TF_OperationDescription*)$desc, (char const*)$attr_name, (void const*)$value, (size_t)$length);
			]"
		end

	c_tf_set_attr_string_list (desc: POINTER; attr_name: POINTER; values: POINTER; lengths: POINTER; num_values: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrStringList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (void const*const *)$values, (size_t const*)$lengths, (int)$num_values);
			]"
		end

	c_tf_set_attr_int (desc: POINTER; attr_name: POINTER; value: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrInt ((TF_OperationDescription*)$desc, (char const*)$attr_name, (int64_t)$value);
			]"
		end

	c_tf_set_attr_int_list (desc: POINTER; attr_name: POINTER; values: POINTER; num_values: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrIntList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (int64_t const*)$values, (int)$num_values);
			]"
		end

	c_tf_set_attr_float (desc: POINTER; attr_name: POINTER; value: REAL)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrFloat ((TF_OperationDescription*)$desc, (char const*)$attr_name, (float)$value);
			]"
		end

	c_tf_set_attr_float_list (desc: POINTER; attr_name: POINTER; values: POINTER; num_values: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrFloatList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (float const*)$values, (int)$num_values);
			]"
		end

	c_tf_set_attr_bool (desc: POINTER; attr_name: POINTER; value: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrBool ((TF_OperationDescription*)$desc, (char const*)$attr_name, (unsigned char)$value);
			]"
		end

	c_tf_set_attr_bool_list (desc: POINTER; attr_name: POINTER; values: POINTER; num_values: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrBoolList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (unsigned char const*)$values, (int)$num_values);
			]"
		end

	c_tf_set_attr_type (desc: POINTER; attr_name: POINTER; value: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrType ((TF_OperationDescription*)$desc, (char const*)$attr_name, (TF_DataType)$value);
			]"
		end

	c_tf_set_attr_type_list (desc: POINTER; attr_name: POINTER; values: POINTER; num_values: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrTypeList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (TF_DataType const*)$values, (int)$num_values);
			]"
		end

	c_tf_set_attr_placeholder (desc: POINTER; attr_name: POINTER; placeholder: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrPlaceholder ((TF_OperationDescription*)$desc, (char const*)$attr_name, (char const*)$placeholder);
			]"
		end

	c_tf_set_attr_func_name (desc: POINTER; attr_name: POINTER; value: POINTER; length: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrFuncName ((TF_OperationDescription*)$desc, (char const*)$attr_name, (char const*)$value, (size_t)$length);
			]"
		end

	c_tf_set_attr_shape (desc: POINTER; attr_name: POINTER; dims: POINTER; num_dims: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrShape ((TF_OperationDescription*)$desc, (char const*)$attr_name, (int64_t const*)$dims, (int)$num_dims);
			]"
		end

	c_tf_set_attr_shape_list (desc: POINTER; attr_name: POINTER; dims: POINTER; num_dims: POINTER; num_shapes: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrShapeList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (int64_t const*const *)$dims, (int const*)$num_dims, (int)$num_shapes);
			]"
		end

	c_tf_set_attr_tensor_shape_proto (desc: POINTER; attr_name: POINTER; proto: POINTER; proto_len: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrTensorShapeProto ((TF_OperationDescription*)$desc, (char const*)$attr_name, (void const*)$proto, (size_t)$proto_len, (TF_Status*)$status);
			]"
		end

	c_tf_set_attr_tensor_shape_proto_list (desc: POINTER; attr_name: POINTER; protos: POINTER; proto_lens: POINTER; num_shapes: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrTensorShapeProtoList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (void const*const *)$protos, (size_t const*)$proto_lens, (int)$num_shapes, (TF_Status*)$status);
			]"
		end

	c_tf_set_attr_tensor (desc: POINTER; attr_name: POINTER; value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrTensor ((TF_OperationDescription*)$desc, (char const*)$attr_name, (TF_Tensor*)$value, (TF_Status*)$status);
			]"
		end

	c_tf_set_attr_tensor_list (desc: POINTER; attr_name: POINTER; values: POINTER; num_values: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrTensorList ((TF_OperationDescription*)$desc, (char const*)$attr_name, (TF_Tensor*const *)$values, (int)$num_values, (TF_Status*)$status);
			]"
		end

	c_tf_set_attr_value_proto (desc: POINTER; attr_name: POINTER; proto: POINTER; proto_len: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SetAttrValueProto ((TF_OperationDescription*)$desc, (char const*)$attr_name, (void const*)$proto, (size_t)$proto_len, (TF_Status*)$status);
			]"
		end

	c_tf_finish_operation (desc: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_FinishOperation ((TF_OperationDescription*)$desc, (TF_Status*)$status);
			]"
		end

	c_tf_operation_name (oper: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationName ((TF_Operation*)$oper);
			]"
		end

	c_tf_operation_op_type (oper: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationOpType ((TF_Operation*)$oper);
			]"
		end

	c_tf_operation_device (oper: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationDevice ((TF_Operation*)$oper);
			]"
		end

	c_tf_operation_num_outputs (oper: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationNumOutputs ((TF_Operation*)$oper);
			]"
		end

	c_tf_operation_output_type (oper_out: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationOutputType (*(TF_Output*)$oper_out);
			]"
		end

	c_tf_operation_output_list_length (oper: POINTER; arg_name: POINTER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationOutputListLength ((TF_Operation*)$oper, (char const*)$arg_name, (TF_Status*)$status);
			]"
		end

	c_tf_operation_num_inputs (oper: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationNumInputs ((TF_Operation*)$oper);
			]"
		end

	c_tf_operation_input_type (oper_in: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationInputType (*(TF_Input*)$oper_in);
			]"
		end

	c_tf_operation_input_list_length (oper: POINTER; arg_name: POINTER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationInputListLength ((TF_Operation*)$oper, (char const*)$arg_name, (TF_Status*)$status);
			]"
		end

	c_tf_operation_input (oper_in: POINTER): POINTER
		external
			"C inline use <c_api.h>"

		alias
			"[
				TF_Output *result = (TF_Output*) malloc (sizeof(TF_Output));
				*result = TF_OperationInput (*(TF_Input*)$oper_in);
				return result;
			]"
		end

	c_tf_operation_output_num_consumers (oper_out: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationOutputNumConsumers (*(TF_Output*)$oper_out);
			]"
		end

	c_tf_operation_output_consumers (oper_out: POINTER; consumers: POINTER; max_consumers: INTEGER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationOutputConsumers (*(TF_Output*)$oper_out, (TF_Input*)$consumers, (int)$max_consumers);
			]"
		end

	c_tf_operation_num_control_inputs (oper: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationNumControlInputs ((TF_Operation*)$oper);
			]"
		end

	c_tf_operation_get_control_inputs (oper: POINTER; control_inputs: POINTER; max_control_inputs: INTEGER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationGetControlInputs ((TF_Operation*)$oper, (TF_Operation**)$control_inputs, (int)$max_control_inputs);
			]"
		end

	c_tf_operation_num_control_outputs (oper: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationNumControlOutputs ((TF_Operation*)$oper);
			]"
		end

	c_tf_operation_get_control_outputs (oper: POINTER; control_outputs: POINTER; max_control_outputs: INTEGER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_OperationGetControlOutputs ((TF_Operation*)$oper, (TF_Operation**)$control_outputs, (int)$max_control_outputs);
			]"
		end

	c_tf_operation_get_attr_metadata (oper: POINTER; attr_name: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"

		alias
			"[
				TF_AttrMetadata *result = (TF_AttrMetadata*) malloc (sizeof(TF_AttrMetadata));
				*result = TF_OperationGetAttrMetadata ((TF_Operation*)$oper, (char const*)$attr_name, (TF_Status*)$status);
				return result;
			]"
		end

	c_tf_operation_get_attr_string (oper: POINTER; attr_name: POINTER; value: POINTER; max_length: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrString ((TF_Operation*)$oper, (char const*)$attr_name, (void*)$value, (size_t)$max_length, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_string_list (oper: POINTER; attr_name: POINTER; values: POINTER; lengths: POINTER; max_values: INTEGER; storage: POINTER; storage_size: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrStringList ((TF_Operation*)$oper, (char const*)$attr_name, (void**)$values, (size_t*)$lengths, (int)$max_values, (void*)$storage, (size_t)$storage_size, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_int (oper: POINTER; attr_name: POINTER; value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrInt ((TF_Operation*)$oper, (char const*)$attr_name, (int64_t*)$value, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_int_list (oper: POINTER; attr_name: POINTER; values: POINTER; max_values: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrIntList ((TF_Operation*)$oper, (char const*)$attr_name, (int64_t*)$values, (int)$max_values, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_float (oper: POINTER; attr_name: POINTER; value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrFloat ((TF_Operation*)$oper, (char const*)$attr_name, (float*)$value, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_float_list (oper: POINTER; attr_name: POINTER; values: POINTER; max_values: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrFloatList ((TF_Operation*)$oper, (char const*)$attr_name, (float*)$values, (int)$max_values, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_bool (oper: POINTER; attr_name: POINTER; value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrBool ((TF_Operation*)$oper, (char const*)$attr_name, (unsigned char*)$value, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_bool_list (oper: POINTER; attr_name: POINTER; values: POINTER; max_values: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrBoolList ((TF_Operation*)$oper, (char const*)$attr_name, (unsigned char*)$values, (int)$max_values, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_type (oper: POINTER; attr_name: POINTER; value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrType ((TF_Operation*)$oper, (char const*)$attr_name, (TF_DataType*)$value, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_type_list (oper: POINTER; attr_name: POINTER; values: POINTER; max_values: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrTypeList ((TF_Operation*)$oper, (char const*)$attr_name, (TF_DataType*)$values, (int)$max_values, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_shape (oper: POINTER; attr_name: POINTER; value: POINTER; num_dims: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrShape ((TF_Operation*)$oper, (char const*)$attr_name, (int64_t*)$value, (int)$num_dims, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_shape_list (oper: POINTER; attr_name: POINTER; dims: POINTER; num_dims: POINTER; num_shapes: INTEGER; storage: POINTER; storage_size: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrShapeList ((TF_Operation*)$oper, (char const*)$attr_name, (int64_t**)$dims, (int*)$num_dims, (int)$num_shapes, (int64_t*)$storage, (int)$storage_size, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_tensor_shape_proto (oper: POINTER; attr_name: POINTER; value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrTensorShapeProto ((TF_Operation*)$oper, (char const*)$attr_name, (TF_Buffer*)$value, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_tensor_shape_proto_list (oper: POINTER; attr_name: POINTER; values: POINTER; max_values: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrTensorShapeProtoList ((TF_Operation*)$oper, (char const*)$attr_name, (TF_Buffer**)$values, (int)$max_values, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_tensor (oper: POINTER; attr_name: POINTER; value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrTensor ((TF_Operation*)$oper, (char const*)$attr_name, (TF_Tensor**)$value, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_tensor_list (oper: POINTER; attr_name: POINTER; values: POINTER; max_values: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrTensorList ((TF_Operation*)$oper, (char const*)$attr_name, (TF_Tensor**)$values, (int)$max_values, (TF_Status*)$status);
			]"
		end

	c_tf_operation_get_attr_value_proto (oper: POINTER; attr_name: POINTER; output_attr_value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationGetAttrValueProto ((TF_Operation*)$oper, (char const*)$attr_name, (TF_Buffer*)$output_attr_value, (TF_Status*)$status);
			]"
		end

	c_tf_graph_operation_by_name (graph: POINTER; oper_name: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphOperationByName ((TF_Graph*)$graph, (char const*)$oper_name);
			]"
		end

	c_tf_graph_next_operation (graph: POINTER; pos: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphNextOperation ((TF_Graph*)$graph, (size_t*)$pos);
			]"
		end

	c_tf_graph_to_graph_def (graph: POINTER; output_graph_def: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphToGraphDef ((TF_Graph*)$graph, (TF_Buffer*)$output_graph_def, (TF_Status*)$status);
			]"
		end

	c_tf_graph_get_op_def (graph: POINTER; op_name: POINTER; output_op_def: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphGetOpDef ((TF_Graph*)$graph, (char const*)$op_name, (TF_Buffer*)$output_op_def, (TF_Status*)$status);
			]"
		end

	c_tf_graph_versions (graph: POINTER; output_version_def: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphVersions ((TF_Graph*)$graph, (TF_Buffer*)$output_version_def, (TF_Status*)$status);
			]"
		end

	c_tf_new_import_graph_def_options: POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewImportGraphDefOptions ();
			]"
		end

	c_tf_delete_import_graph_def_options (opts: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteImportGraphDefOptions ((TF_ImportGraphDefOptions*)$opts);
			]"
		end

	c_tf_import_graph_def_options_set_prefix (opts: POINTER; a_prefix: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsSetPrefix ((TF_ImportGraphDefOptions*)$opts, (char const*)$a_prefix);
			]"
		end

	c_tf_import_graph_def_options_set_default_device (opts: POINTER; device: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsSetDefaultDevice ((TF_ImportGraphDefOptions*)$opts, (char const*)$device);
			]"
		end

	c_tf_import_graph_def_options_set_uniquify_names (opts: POINTER; uniquify_names: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsSetUniquifyNames ((TF_ImportGraphDefOptions*)$opts, (unsigned char)$uniquify_names);
			]"
		end

	c_tf_import_graph_def_options_set_uniquify_prefix (opts: POINTER; uniquify_prefix: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsSetUniquifyPrefix ((TF_ImportGraphDefOptions*)$opts, (unsigned char)$uniquify_prefix);
			]"
		end

	c_tf_import_graph_def_options_add_input_mapping (opts: POINTER; src_name: POINTER; src_index: INTEGER; dst: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsAddInputMapping ((TF_ImportGraphDefOptions*)$opts, (char const*)$src_name, (int)$src_index, *(TF_Output*)$dst);
			]"
		end

	c_tf_import_graph_def_options_remap_control_dependency (opts: POINTER; src_name: POINTER; dst: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsRemapControlDependency ((TF_ImportGraphDefOptions*)$opts, (char const*)$src_name, (TF_Operation*)$dst);
			]"
		end

	c_tf_import_graph_def_options_add_control_dependency (opts: POINTER; oper: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsAddControlDependency ((TF_ImportGraphDefOptions*)$opts, (TF_Operation*)$oper);
			]"
		end

	c_tf_import_graph_def_options_add_return_output (opts: POINTER; oper_name: POINTER; index: INTEGER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsAddReturnOutput ((TF_ImportGraphDefOptions*)$opts, (char const*)$oper_name, (int)$index);
			]"
		end

	c_tf_import_graph_def_options_num_return_outputs (opts: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_ImportGraphDefOptionsNumReturnOutputs ((TF_ImportGraphDefOptions const*)$opts);
			]"
		end

	c_tf_import_graph_def_options_add_return_operation (opts: POINTER; oper_name: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefOptionsAddReturnOperation ((TF_ImportGraphDefOptions*)$opts, (char const*)$oper_name);
			]"
		end

	c_tf_import_graph_def_options_num_return_operations (opts: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_ImportGraphDefOptionsNumReturnOperations ((TF_ImportGraphDefOptions const*)$opts);
			]"
		end

	c_tf_import_graph_def_results_return_outputs (results: POINTER; num_outputs: POINTER; outputs: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefResultsReturnOutputs ((TF_ImportGraphDefResults*)$results, (int*)$num_outputs, (TF_Output**)$outputs);
			]"
		end

	c_tf_import_graph_def_results_return_operations (results: POINTER; num_opers: POINTER; opers: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefResultsReturnOperations ((TF_ImportGraphDefResults*)$results, (int*)$num_opers, (TF_Operation***)$opers);
			]"
		end

	c_tf_import_graph_def_results_missing_unused_input_mappings (results: POINTER; num_missing_unused_input_mappings: POINTER; src_names: POINTER; src_indexes: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ImportGraphDefResultsMissingUnusedInputMappings ((TF_ImportGraphDefResults*)$results, (int*)$num_missing_unused_input_mappings, (char const***)$src_names, (int**)$src_indexes);
			]"
		end

	c_tf_delete_import_graph_def_results (results: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteImportGraphDefResults ((TF_ImportGraphDefResults*)$results);
			]"
		end

	c_tf_graph_import_graph_def_with_results (graph: POINTER; graph_def: POINTER; options: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphImportGraphDefWithResults ((TF_Graph*)$graph, (TF_Buffer const*)$graph_def, (TF_ImportGraphDefOptions const*)$options, (TF_Status*)$status);
			]"
		end

	c_tf_graph_import_graph_def_with_return_outputs (graph: POINTER; graph_def: POINTER; options: POINTER; return_outputs: POINTER; num_return_outputs: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphImportGraphDefWithReturnOutputs ((TF_Graph*)$graph, (TF_Buffer const*)$graph_def, (TF_ImportGraphDefOptions const*)$options, (TF_Output*)$return_outputs, (int)$num_return_outputs, (TF_Status*)$status);
			]"
		end

	c_tf_graph_import_graph_def (graph: POINTER; graph_def: POINTER; options: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphImportGraphDef ((TF_Graph*)$graph, (TF_Buffer const*)$graph_def, (TF_ImportGraphDefOptions const*)$options, (TF_Status*)$status);
			]"
		end

	c_tf_graph_copy_function (g: POINTER; func: POINTER; grad: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_GraphCopyFunction ((TF_Graph*)$g, (TF_Function const*)$func, (TF_Function const*)$grad, (TF_Status*)$status);
			]"
		end

	c_tf_graph_num_functions (g: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphNumFunctions ((TF_Graph*)$g);
			]"
		end

	c_tf_graph_get_functions (g: POINTER; funcs: POINTER; max_func: INTEGER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphGetFunctions ((TF_Graph*)$g, (TF_Function**)$funcs, (int)$max_func, (TF_Status*)$status);
			]"
		end

	c_tf_operation_to_node_def (oper: POINTER; output_node_def: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_OperationToNodeDef ((TF_Operation*)$oper, (TF_Buffer*)$output_node_def, (TF_Status*)$status);
			]"
		end

	c_tf_finish_while (params: POINTER; status: POINTER; outputs: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_FinishWhile ((TF_WhileParams const*)$params, (TF_Status*)$status, (TF_Output*)$outputs);
			]"
		end

	c_tf_abort_while (params: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_AbortWhile ((TF_WhileParams const*)$params);
			]"
		end

	c_tf_add_gradients (g: POINTER; y: POINTER; ny: INTEGER; x: POINTER; nx: INTEGER; dx: POINTER; status: POINTER; dy: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_AddGradients ((TF_Graph*)$g, (TF_Output*)$y, (int)$ny, (TF_Output*)$x, (int)$nx, (TF_Output*)$dx, (TF_Status*)$status, (TF_Output*)$dy);
			]"
		end

	c_tf_add_gradients_with_prefix (g: POINTER; a_prefix: POINTER; y: POINTER; ny: INTEGER; x: POINTER; nx: INTEGER; dx: POINTER; status: POINTER; dy: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_AddGradientsWithPrefix ((TF_Graph*)$g, (char const*)$a_prefix, (TF_Output*)$y, (int)$ny, (TF_Output*)$x, (int)$nx, (TF_Output*)$dx, (TF_Status*)$status, (TF_Output*)$dy);
			]"
		end

	c_tf_graph_to_function (fn_body: POINTER; fn_name: POINTER; append_hash_to_fn_name: INTEGER; num_opers: INTEGER; opers: POINTER; ninputs: INTEGER; inputs: POINTER; noutputs: INTEGER; outputs: POINTER; output_names: POINTER; opts: POINTER; description: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphToFunction ((TF_Graph const*)$fn_body, (char const*)$fn_name, (unsigned char)$append_hash_to_fn_name, (int)$num_opers, (TF_Operation const*const *)$opers, (int)$ninputs, (TF_Output const*)$inputs, (int)$noutputs, (TF_Output const*)$outputs, (char const*const *)$output_names, (TF_FunctionOptions const*)$opts, (char const*)$description, (TF_Status*)$status);
			]"
		end

	c_tf_graph_to_function_with_control_outputs (fn_body: POINTER; fn_name: POINTER; append_hash_to_fn_name: INTEGER; num_opers: INTEGER; opers: POINTER; ninputs: INTEGER; inputs: POINTER; noutputs: INTEGER; outputs: POINTER; output_names: POINTER; ncontrol_outputs: INTEGER; control_outputs: POINTER; control_output_names: POINTER; opts: POINTER; description: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GraphToFunctionWithControlOutputs ((TF_Graph const*)$fn_body, (char const*)$fn_name, (unsigned char)$append_hash_to_fn_name, (int)$num_opers, (TF_Operation const*const *)$opers, (int)$ninputs, (TF_Output const*)$inputs, (int)$noutputs, (TF_Output const*)$outputs, (char const*const *)$output_names, (int)$ncontrol_outputs, (TF_Operation const*const *)$control_outputs, (char const*const *)$control_output_names, (TF_FunctionOptions const*)$opts, (char const*)$description, (TF_Status*)$status);
			]"
		end

	c_tf_function_name (func: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_FunctionName ((TF_Function*)$func);
			]"
		end

	c_tf_function_to_function_def (func: POINTER; output_func_def: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_FunctionToFunctionDef ((TF_Function*)$func, (TF_Buffer*)$output_func_def, (TF_Status*)$status);
			]"
		end

	c_tf_function_import_function_def (proto: POINTER; proto_len: INTEGER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_FunctionImportFunctionDef ((void const*)$proto, (size_t)$proto_len, (TF_Status*)$status);
			]"
		end

	c_tf_function_set_attr_value_proto (func: POINTER; attr_name: POINTER; proto: POINTER; proto_len: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_FunctionSetAttrValueProto ((TF_Function*)$func, (char const*)$attr_name, (void const*)$proto, (size_t)$proto_len, (TF_Status*)$status);
			]"
		end

	c_tf_function_get_attr_value_proto (func: POINTER; attr_name: POINTER; output_attr_value: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_FunctionGetAttrValueProto ((TF_Function*)$func, (char const*)$attr_name, (TF_Buffer*)$output_attr_value, (TF_Status*)$status);
			]"
		end

	c_tf_delete_function (func: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteFunction ((TF_Function*)$func);
			]"
		end

	c_tf_try_evaluate_constant (graph: POINTER; output: POINTER; a_result: POINTER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_TryEvaluateConstant ((TF_Graph*)$graph, *(TF_Output*)$output, (TF_Tensor**)$a_result, (TF_Status*)$status);
			]"
		end

	c_tf_new_session (graph: POINTER; opts: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewSession ((TF_Graph*)$graph, (TF_SessionOptions const*)$opts, (TF_Status*)$status);
			]"
		end

	c_tf_load_session_from_saved_model (session_options: POINTER; run_options: POINTER; export_dir: POINTER; tags: POINTER; tags_len: INTEGER; graph: POINTER; meta_graph_def: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_LoadSessionFromSavedModel ((TF_SessionOptions const*)$session_options, (TF_Buffer const*)$run_options, (char const*)$export_dir, (char const*const *)$tags, (int)$tags_len, (TF_Graph*)$graph, (TF_Buffer*)$meta_graph_def, (TF_Status*)$status);
			]"
		end

	c_tf_close_session (anonymous_1: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_CloseSession ((TF_Session*)$anonymous_1, (TF_Status*)$status);
			]"
		end

	c_tf_delete_session (anonymous_1: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteSession ((TF_Session*)$anonymous_1, (TF_Status*)$status);
			]"
		end

	c_tf_session_run (session: POINTER; run_options: POINTER; inputs: POINTER; input_values: POINTER; ninputs: INTEGER; outputs: POINTER; output_values: POINTER; noutputs: INTEGER; target_opers: POINTER; ntargets: INTEGER; run_metadata: POINTER; anonymous_1: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SessionRun ((TF_Session*)$session, (TF_Buffer const*)$run_options, (TF_Output const*)$inputs, (TF_Tensor*const *)$input_values, (int)$ninputs, (TF_Output const*)$outputs, (TF_Tensor**)$output_values, (int)$noutputs, (TF_Operation const*const *)$target_opers, (int)$ntargets, (TF_Buffer*)$run_metadata, (TF_Status*)$anonymous_1);
			]"
		end

	c_tf_session_prun_setup (anonymous_1: POINTER; inputs: POINTER; ninputs: INTEGER; outputs: POINTER; noutputs: INTEGER; target_opers: POINTER; ntargets: INTEGER; handle: POINTER; anonymous_2: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SessionPRunSetup ((TF_Session*)$anonymous_1, (TF_Output const*)$inputs, (int)$ninputs, (TF_Output const*)$outputs, (int)$noutputs, (TF_Operation const*const *)$target_opers, (int)$ntargets, (char const**)$handle, (TF_Status*)$anonymous_2);
			]"
		end

	c_tf_session_prun (anonymous_1: POINTER; handle: POINTER; inputs: POINTER; input_values: POINTER; ninputs: INTEGER; outputs: POINTER; output_values: POINTER; noutputs: INTEGER; target_opers: POINTER; ntargets: INTEGER; anonymous_2: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_SessionPRun ((TF_Session*)$anonymous_1, (char const*)$handle, (TF_Output const*)$inputs, (TF_Tensor*const *)$input_values, (int)$ninputs, (TF_Output const*)$outputs, (TF_Tensor**)$output_values, (int)$noutputs, (TF_Operation const*const *)$target_opers, (int)$ntargets, (TF_Status*)$anonymous_2);
			]"
		end

	c_tf_delete_prun_handle (handle: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeletePRunHandle ((char const*)$handle);
			]"
		end

	c_tf_new_deprecated_session (anonymous_1: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewDeprecatedSession ((TF_SessionOptions const*)$anonymous_1, (TF_Status*)$status);
			]"
		end

	c_tf_close_deprecated_session (anonymous_1: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_CloseDeprecatedSession ((TF_DeprecatedSession*)$anonymous_1, (TF_Status*)$status);
			]"
		end

	c_tf_delete_deprecated_session (anonymous_1: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteDeprecatedSession ((TF_DeprecatedSession*)$anonymous_1, (TF_Status*)$status);
			]"
		end

	c_tf_reset (opt: POINTER; containers: POINTER; ncontainers: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_Reset ((TF_SessionOptions const*)$opt, (char const**)$containers, (int)$ncontainers, (TF_Status*)$status);
			]"
		end

	c_tf_extend_graph (anonymous_1: POINTER; proto: POINTER; proto_len: INTEGER; anonymous_2: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ExtendGraph ((TF_DeprecatedSession*)$anonymous_1, (void const*)$proto, (size_t)$proto_len, (TF_Status*)$anonymous_2);
			]"
		end

	c_tf_run (anonymous_1: POINTER; run_options: POINTER; input_names: POINTER; inputs: POINTER; ninputs: INTEGER; output_names: POINTER; outputs: POINTER; noutputs: INTEGER; target_oper_names: POINTER; ntargets: INTEGER; run_metadata: POINTER; anonymous_2: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_Run ((TF_DeprecatedSession*)$anonymous_1, (TF_Buffer const*)$run_options, (char const**)$input_names, (TF_Tensor**)$inputs, (int)$ninputs, (char const**)$output_names, (TF_Tensor**)$outputs, (int)$noutputs, (char const**)$target_oper_names, (int)$ntargets, (TF_Buffer*)$run_metadata, (TF_Status*)$anonymous_2);
			]"
		end

	c_tf_prun_setup (anonymous_1: POINTER; input_names: POINTER; ninputs: INTEGER; output_names: POINTER; noutputs: INTEGER; target_oper_names: POINTER; ntargets: INTEGER; handle: POINTER; anonymous_2: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_PRunSetup ((TF_DeprecatedSession*)$anonymous_1, (char const**)$input_names, (int)$ninputs, (char const**)$output_names, (int)$noutputs, (char const**)$target_oper_names, (int)$ntargets, (char const**)$handle, (TF_Status*)$anonymous_2);
			]"
		end

	c_tf_prun (anonymous_1: POINTER; handle: POINTER; input_names: POINTER; inputs: POINTER; ninputs: INTEGER; output_names: POINTER; outputs: POINTER; noutputs: INTEGER; target_oper_names: POINTER; ntargets: INTEGER; anonymous_2: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_PRun ((TF_DeprecatedSession*)$anonymous_1, (char const*)$handle, (char const**)$input_names, (TF_Tensor**)$inputs, (int)$ninputs, (char const**)$output_names, (TF_Tensor**)$outputs, (int)$noutputs, (char const**)$target_oper_names, (int)$ntargets, (TF_Status*)$anonymous_2);
			]"
		end

	c_tf_session_list_devices (session: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_SessionListDevices ((TF_Session*)$session, (TF_Status*)$status);
			]"
		end

	c_tf_deprecated_session_list_devices (session: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_DeprecatedSessionListDevices ((TF_DeprecatedSession*)$session, (TF_Status*)$status);
			]"
		end

	c_tf_delete_device_list (list: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteDeviceList ((TF_DeviceList*)$list);
			]"
		end

	c_tf_device_list_count (list: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_DeviceListCount ((TF_DeviceList const*)$list);
			]"
		end

	c_tf_device_list_name (list: POINTER; index: INTEGER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_DeviceListName ((TF_DeviceList const*)$list, (int)$index, (TF_Status*)$status);
			]"
		end

	c_tf_device_list_type (list: POINTER; index: INTEGER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_DeviceListType ((TF_DeviceList const*)$list, (int)$index, (TF_Status*)$status);
			]"
		end

	c_tf_device_list_memory_bytes (list: POINTER; index: INTEGER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_DeviceListMemoryBytes ((TF_DeviceList const*)$list, (int)$index, (TF_Status*)$status);
			]"
		end

	c_tf_device_list_incarnation (list: POINTER; index: INTEGER; status: POINTER): INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_DeviceListIncarnation ((TF_DeviceList const*)$list, (int)$index, (TF_Status*)$status);
			]"
		end

	c_tf_load_library (library_filename: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_LoadLibrary ((char const*)$library_filename, (TF_Status*)$status);
			]"
		end

	c_tf_get_op_list (lib_handle: POINTER): POINTER
		external
			"C inline use <c_api.h>"

		alias
			"[
				TF_Buffer *result = (TF_Buffer*) malloc (sizeof(TF_Buffer));
				*result = TF_GetOpList ((TF_Library*)$lib_handle);
				return result;
			]"
		end

	c_tf_delete_library_handle (lib_handle: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteLibraryHandle ((TF_Library*)$lib_handle);
			]"
		end

	c_tf_get_all_op_list: POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GetAllOpList ();
			]"
		end

	c_tf_new_api_def_map (op_list_buffer: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewApiDefMap ((TF_Buffer*)$op_list_buffer, (TF_Status*)$status);
			]"
		end

	c_tf_delete_api_def_map (apimap: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteApiDefMap ((TF_ApiDefMap*)$apimap);
			]"
		end

	c_tf_api_def_map_put (api_def_map: POINTER; text: POINTER; text_len: INTEGER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ApiDefMapPut ((TF_ApiDefMap*)$api_def_map, (char const*)$text, (size_t)$text_len, (TF_Status*)$status);
			]"
		end

	c_tf_api_def_map_get (api_def_map: POINTER; name: POINTER; name_len: INTEGER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_ApiDefMapGet ((TF_ApiDefMap*)$api_def_map, (char const*)$name, (size_t)$name_len, (TF_Status*)$status);
			]"
		end

	c_tf_get_all_registered_kernels (status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GetAllRegisteredKernels ((TF_Status*)$status);
			]"
		end

	c_tf_get_registered_kernels_for_op (name: POINTER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_GetRegisteredKernelsForOp ((char const*)$name, (TF_Status*)$status);
			]"
		end

	c_tf_new_server (proto: POINTER; proto_len: INTEGER; status: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_NewServer ((void const*)$proto, (size_t)$proto_len, (TF_Status*)$status);
			]"
		end

	c_tf_server_start (server: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ServerStart ((TF_Server*)$server, (TF_Status*)$status);
			]"
		end

	c_tf_server_stop (server: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ServerStop ((TF_Server*)$server, (TF_Status*)$status);
			]"
		end

	c_tf_server_join (server: POINTER; status: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_ServerJoin ((TF_Server*)$server, (TF_Status*)$status);
			]"
		end

	c_tf_server_target (server: POINTER): POINTER
		external
			"C inline use <c_api.h>"
		alias
			"[
				return TF_ServerTarget ((TF_Server*)$server);
			]"
		end

	c_tf_delete_server (server: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_DeleteServer ((TF_Server*)$server);
			]"
		end

	c_tf_register_log_listener (listener: POINTER)
		external
			"C inline use <c_api.h>"
		alias
			"[
				TF_RegisterLogListener ((void (*) (char const *anonymous_1))$listener);
			]"
		end

feature -- Externals Address

end
