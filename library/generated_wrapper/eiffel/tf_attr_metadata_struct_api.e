note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class TF_ATTR_METADATA_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	is_list: INTEGER
			-- Access member `is_list`
		require
			exists: exists
		do
			Result := c_is_list (item)
		ensure
			result_correct: Result = c_is_list (item)
		end

	set_is_list (a_value: INTEGER) 
			-- Change the value of member `is_list` to `a_value`.
		require
			exists: exists
		do
			set_c_is_list (item, a_value)
		ensure
			is_list_set: a_value = is_list
		end

	list_size: INTEGER
			-- Access member `list_size`
		require
			exists: exists
		do
			Result := c_list_size (item)
		ensure
			result_correct: Result = c_list_size (item)
		end

	set_list_size (a_value: INTEGER) 
			-- Change the value of member `list_size` to `a_value`.
		require
			exists: exists
		do
			set_c_list_size (item, a_value)
		ensure
			list_size_set: a_value = list_size
		end

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	total_size: INTEGER
			-- Access member `total_size`
		require
			exists: exists
		do
			Result := c_total_size (item)
		ensure
			result_correct: Result = c_total_size (item)
		end

	set_total_size (a_value: INTEGER) 
			-- Change the value of member `total_size` to `a_value`.
		require
			exists: exists
		do
			set_c_total_size (item, a_value)
		ensure
			total_size_set: a_value = total_size
		end

feature {NONE} -- Implementation wrapper for struct struct TF_AttrMetadata

	sizeof_external: INTEGER 
		external
			"C inline use <c_api.h>"
		alias
			"sizeof(struct TF_AttrMetadata)"
		end

	c_is_list (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->is_list
			]"
		end

	set_c_is_list (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->is_list =  (unsigned char)$a_value
			]"
		ensure
			is_list_set: a_value = c_is_list (an_item)
		end

	c_list_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->list_size
			]"
		end

	set_c_list_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->list_size =  (int64_t)$a_value
			]"
		ensure
			list_size_set: a_value = c_list_size (an_item)
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->type =  (TF_AttrType)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_total_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->total_size
			]"
		end

	set_c_total_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_AttrMetadata*)$an_item)->total_size =  (int64_t)$a_value
			]"
		ensure
			total_size_set: a_value = c_total_size (an_item)
		end

end
