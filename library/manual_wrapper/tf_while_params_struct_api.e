note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class TF_WHILE_PARAMS_STRUCT_API

inherit

	MEMORY_STRUCTURE


create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	ninputs: INTEGER
			-- Access member `ninputs`
		require
			exists: exists
		do
			Result := c_ninputs (item)
		ensure
			result_correct: Result = c_ninputs (item)
		end

	cond_graph: detachable TF_GRAPH_STRUCT_API
			-- Access member `cond_graph`
		require
			exists: exists
		do
			if attached c_cond_graph (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_cond_graph (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.item = c_cond_graph (item)
		end


	cond_inputs: detachable TF_OUTPUT_STRUCT_API
			-- Access member `cond_inputs`
		require
			exists: exists
		do
			if attached c_cond_inputs (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_cond_inputs (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.item = c_cond_inputs (item)
		end

	cond_output: detachable TF_OUTPUT_STRUCT_API
			-- Access member `cond_output`
		require
			exists: exists
		do
			if attached c_cond_output (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_cond_output (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.item = c_cond_output (item)
		end

	body_graph: detachable TF_GRAPH_STRUCT_API
			-- Access member `body_graph`
		require
			exists: exists
		do
			if attached c_body_graph (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_body_graph (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.item = c_body_graph (item)
		end

	body_inputs: detachable TF_OUTPUT_STRUCT_API
			-- Access member `body_inputs`
		require
			exists: exists
		do
			if attached c_body_inputs (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_body_inputs (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.item = c_body_inputs (item)
		end

	body_outputs: detachable TF_OUTPUT_STRUCT_API
			-- Access member `body_outputs`
		require
			exists: exists
		do
			if attached c_body_outputs (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_body_outputs (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.item = c_body_outputs (item)
		end

	name:  detachable STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: STRING)
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, (create {C_STRING}.make (a_value)).item )
		end

feature {NONE} -- Implementation wrapper for struct struct TF_WhileParams

	sizeof_external: INTEGER
		external
			"C inline use <c_api.h>"
		alias
			"sizeof(struct TF_WhileParams)"
		end

	c_ninputs (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->ninputs
			]"
		end


	c_cond_graph (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->cond_graph
			]"
		end


	c_cond_inputs (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->cond_inputs
			]"
		end


	c_cond_output (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				&((struct TF_WhileParams*)$an_item)->cond_output
			]"
		end


	c_body_graph (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->body_graph
			]"
		end


	c_body_inputs (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->body_inputs
			]"
		end


	c_body_outputs (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->body_outputs
			]"
		end


	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <c_api.h>"
		alias
			"[
				((struct TF_WhileParams*)$an_item)->name =  (char const*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

end
